input MatchingRuleDefaultValueDto {
    value: String
    fullTextSearchSettings: FullTextSearchSettings
}

input MatchingRuleDefaultValuesCaseDto {
    when: String!
    then: MatchingRuleDefaultValueDto!
}

input MatchingRuleDefaultValuesDto {
    cases: [MatchingRuleDefaultValuesCaseDto]
    defaultValue: MatchingRuleDefaultValueDto
}

type MatchingRuleDefaultValuesView {
    value: String
    fullTextSearchSettings: FullTextSearchSettingsView
}

type MatchingRuleDefaultValueCaseView {
    when: String!
    then: MatchingRuleDefaultValuesView
}

type MatchingRuleDefaultValuesCaseView {
    cases: [MatchingRuleDefaultValueCaseView]
    defaultValue: MatchingRuleDefaultValuesView
}

input MatchingRuleCreateDto {
    matchingType: RuleMatchingType
    defaultValues: MatchingRuleDefaultValuesDto
    accessType: RuleAccessType!
    isMandatoryForMatching: Boolean
}

input MatchingRuleUpdateDto {
    id: Int
    matchingType: RuleMatchingType
    defaultValues: MatchingRuleDefaultValuesDto
    accessType: RuleAccessType!
    isMandatoryForMatching: Boolean
}

type MatchingRuleView {
    id: Int
    questionId: Int
    matchingType: RuleMatchingType
    defaultValues: MatchingRuleDefaultValuesCaseView
    accessType: RuleAccessType
    isMandatoryForMatching: Boolean
    createdAt: String
}

input QuestionBlockCreateDto {
    name: String!
}

input QuestionBlockUpdateDto {
    id: Int!
    name: String!
}

type QuestionBlockView {
    id: Int
    name: String
}

input QuestionaryTemplateCreateRequest {
    name: String!
    description: String!
    questions: [QuestionCreateDto]
}

input QuestionaryTemplateUpdateRequest {
    id: Int!
    name: String!
    description: String!
    questions: [QuestionUpdateDto]
}

type QuestionaryTemplateView {
    id: Int
    name: String
    description: String
    questions: [QuestionView]
}

input QuestionCreateDto {
    matchingRule: MatchingRuleCreateDto
    questionBlock: QuestionBlockCreateDto
    title: String!
    description: String!
    answerType: QuestionAnswerType!
    isMandatory: Boolean
    fromVal: Float
    toVal: Float
    answerOptions: [String]
}

input QuestionUpdateDto {
    id: Int
    title: String!
    description: String!
    answerType: QuestionAnswerType!
    isMandatory: Boolean
    fromVal: Float
    toVal: Float
    matchingRule: MatchingRuleUpdateDto
    questionBlockId: Int
    questionBlock: QuestionBlockUpdateDto
    answerOptions: [String]
}

type QuestionView {
    id: Int
    questionaryTemplateId: Int
    matchingRule: MatchingRuleView
    questionBlockId: Int
    questionBlock: QuestionBlockView
    title: String
    description: String
    answerType: QuestionAnswerType
    isMandatory: Boolean
    fromVal: Float
    toVal: Float
    createdAt: String
    answerOptions: [String]
}

extend type Mutation {
    createTemplate(template: QuestionaryTemplateCreateRequest!): Boolean
    updateTemplate(template: QuestionaryTemplateUpdateRequest!): Boolean
    deleteTemplate(template: QuestionaryTemplateUpdateRequest!): Boolean
    updateQuestionBlock(questionBlock: QuestionBlockUpdateDto!): Boolean
}