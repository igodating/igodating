create table if not exists chats(
    id bigserial primary key,
    title varchar not null,
    type varchar not null,
    creator_id bigint,
    created_at timestamptz not null default now(),
    updated_at timestamptz not null default now()
);

create table if not exists chat_members(
    id bigserial primary key,
    profile_id bigint not null,
    chat_id bigint not null references chats (id),
    profile_type varchar not null,
    user_name varchar not null,
    kicked boolean default false,
    created_at timestamptz not null default now(),
    updated_at timestamptz not null default now(),
    unique(profile_id, chat_id)
);

create table if not exists messages(
    id bigserial primary key,
    message varchar,
    chat_id bigint not null references chats (id),
    chat_member_id bigint not null references chat_members (id),
    attachments jsonb,
    deleted boolean default false,
    created_at timestamptz not null default now(),
    updated_at timestamptz not null default now()
);

create table if not exists unread_messages(
    message_id bigint not null references messages (id),
    member_id bigint not null references chat_members (id),
    primary key(member_id, message_id)
);

create table allowed_file_extensions
(
    id             bigserial primary key,
    operation_name varchar     not null,
    extension      varchar     not null,
    created_at     timestamptz not null default now(),
    updated_at     timestamptz not null default now()
);

insert into allowed_file_extensions (operation_name, extension)
VALUES ('CHAT', 'gif'),
       ('CHAT', 'jpeg'),
       ('CHAT', 'jpg'),
       ('CHAT', 'png'),
       ('CHAT', 'xls'),
       ('CHAT', 'xlsx'),
       ('CHAT', 'pdf'),
       ('CHAT', 'doc'),
       ('CHAT', 'docx');

create or replace function add_unread_messages()
    returns trigger as
$$
BEGIN
    insert into unread_messages (message_id, member_id)
      select NEW.id, unnest::bigint
      from unnest(array[
         (select array_agg(id) from chat_members where chat_id = NEW.chat_id)
      ]);
    RETURN NEW;
END;
$$ language plpgsql;

CREATE TRIGGER add_unread_messages_trigger
    AFTER insert
    ON messages
    FOR EACH ROW
EXECUTE PROCEDURE add_unread_messages();

create or replace function set_updated_at_to_now()
    RETURNS trigger AS
$$
begin
    NEW.updated_at = now();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

create trigger set_updated_at_to_now_trigger
    before update
    on chats
    for each row
EXECUTE procedure set_updated_at_to_now();

CREATE TRIGGER set_updated_at_to_now_trigger
    BEFORE UPDATE
    ON chat_members
    FOR EACH ROW
EXECUTE PROCEDURE set_updated_at_to_now();

CREATE TRIGGER set_updated_at_to_now_trigger
    BEFORE UPDATE
    ON messages
    FOR EACH ROW
EXECUTE PROCEDURE set_updated_at_to_now();

comment on table chats is 'Table contains chats';
comment on column chats.id is 'Unique identifier. Autogenerated';
comment on column chats.title is 'Title for chat';
comment on column chats.type is 'Type of chat. See ChatType.java class';
comment on column chats.creator_id is 'Creator reference to chat_members table';

comment on table chat_members is 'Table contains chats';
comment on column chat_members.id is 'Unique identifier. Autogenerated';
comment on column chat_members.profile_id is 'Reference to profile id';
comment on column chat_members.profile_type is 'Profile type';
comment on column chat_members.user_name is 'User name';
comment on column chat_members.kicked is 'If member kicked from chat - true';

comment on table messages is 'Table contains messages';
comment on column messages.id is 'Unique identifier. Autogenerated';
comment on column messages.message is 'Text of message';
comment on column messages.chat_id is 'Reference to chats table';
comment on column messages.attachments is 'Array of attachments';
comment on column messages.deleted is 'If message is deleted - true';

comment on table unread_messages is 'Table contains unread messages. Rows added by function add_unread_messages. Rows removed from backend side';
comment on column unread_messages.message_id is 'Reference to messages table';
comment on column unread_messages.member_id is 'references to chat_members table';

comment on function add_unread_messages() is 'Function for insert row to unread_messages table';

